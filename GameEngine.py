import pygame, sys, os
from pygame.locals import *

#To do list:
#make exit block that returns to the menu or next level
#load levels from text file.
#make title screen class and scene changer class


#--------------------------Classes and Functions-----------------------------------------------#
def load_image(name):
	path = os.path.join("images", name)
	image = pygame.image.load(path)
	return image

def load_sliced_images(width, height, filename):

		images = []

		master_image = load_image(filename)

		master_width, master_height = master_image.get_size()

		for i in xrange(int(master_width/width)):
			images.append(master_image.subsurface(i*width, 0, width, height))

		return images

def build_platforms(level, step, scene):
	#Load level from txt file and save it in variable and pass it as argument
	x = 0
	y = 0

	for row in level:
		for col in row:
			if col == "P":
				block = platform(x, y, step)
				scene.block_list.add(block)
			if col == "E":
				block = exitBlock(x, y, step)
				scene.block_list.add(block)
			if col == "N":
				spike = spikeBlock(x, y, step)
				scene.block_list.add(spike)
			x += step
		y += step
		x = 0
	print "creating level ended"

def complex_camera(camera, target_rect):
	l, t, _, _ = target_rect
	_, _, w, h = camera
	l, t, _, _ = -l+half_width, -t+half_height, w, h

	l = min(0, l)                    # stop scrolling at the left edge
	l = max(-(camera.width-700), l)
	t = max(-(camera.height-700), t) # stop scrolling at the bottom
	t = min(0, t)
	return Rect(l, t, w, h)

# --------------------- Classes and their methods ------------------------------------------------#
class Player(pygame.sprite.Sprite):

	#attributes
	right = False
	left = False
	up = False

	change_x = 0
	change_y = 0

	# is the image flipped
	flipped = False

	# ground check
	on_ground = False
	#movement check
	moving = False

	# -- methods
	def __init__(self, x, y):
		pygame.sprite.Sprite.__init__(self)

		#image list
		self.images = load_sliced_images(31, 39, "spr_hero.png")
		
		#track time
		self.start = pygame.time.get_ticks()
		self.delay = 1000 / FPS
		self.last_update = 0
		self.frame = 0

		self.image = self.images[self.frame]
		self.rect = self.image.get_rect()

		self.rect.x = x
		self.rect.y = y
		self.start_x = x
		self.start_y = y

	def imageflip(self, direction):
		if direction == "left":
			self.flipped = True
		elif direction == "right":
			self.flipped = False

	def update(self, blocks, t):

		if self.up == True:
			if self.on_ground == True:
				self.change_y -= 8

		if self.left == True:
			self.change_x = -8
			self.moving = True

		if self.right == True:
			self.change_x = 8
			self.moving = True

		if self.on_ground == False:
			# only accelerate with gravity if in the air
			self.change_y += 0.7

			# max falling speed
			if self.change_y > 50:
				manager.go_to(TitleScreen())

		if not (self.left or self.right):
			self.change_x = 0
			self.moving = False

        # increment in x direction
		self.rect.left += self.change_x

        # do x-axis collisions
		self.collide(self.change_x, 0, blocks)

        # increment in y direction
		self.rect.top += self.change_y

        # assuming we're in the air
		self.on_ground = False

        # do y-axis collisions
		self.collide(0, self.change_y, blocks)

		# cycle frame for running animation if moving
		if self.moving == True:
			if t - self.last_update > self.delay:
				self.frame += 1
				if self.frame >= len(self.images):
					self.frame = 0
				self.last_update = t
		elif self.moving == False:
			self.frame = 0

		# Flips player.image, if flipped is true.
		if self.flipped == False:
			self.image = self.images[self.frame]
		elif self.flipped == True: 
			self.image = pygame.transform.flip(self.images[self.frame], True, False)

	def collide(self, change_x, change_y, blocks):

		for block in blocks:
			if pygame.sprite.collide_rect(self, block):
				if isinstance(block, spikeBlock):

					self.rect.x = self.start_x
					self.rect.y = self.start_y

				if isinstance(block, exitBlock):

					manager.go_to(Levelscene(leveldict["level1"]))

				if change_x > 0:
					self.rect.right = block.rect.left

				if change_x < 0:
					self.rect.left = block.rect.right

				if change_y > 0:
					self.rect.bottom = block.rect.top
					self.on_ground = True
					self.change_y = 0
				if change_y < 0:
					self.rect.top = block.rect.bottom

class Levelscene(object):
	def __init__(self, leveldict):
		self.image = load_image(leveldict["levelname"])
		self.rect = self.image.get_rect()


		self.player_list = pygame.sprite.Group()
		self.player = Player(150, 300)
		self.player_list.add(self.player)

		self.camera = Camera(complex_camera, self.rect.width, self.rect.height)

		self.block_list = pygame.sprite.Group()
		build_platforms(leveldict["level_list"], leveldict["step"], self)

	def handle_events(self, events):
		for event in events: 
			if event.type == pygame.QUIT:
				pygame.quit()
				sys.exit()
	
			if event.type == KEYDOWN:
				if event.key == K_LEFT:
					self.player.left = True
					self.player.imageflip("left")

				if event.key == K_RIGHT:
					self.player.right = True
					self.player.imageflip("right")
			
				if event.key == K_UP or event.key == K_SPACE:
					self.player.up = True
                 
			if event.type == KEYUP: 
				if event.key == K_LEFT:
					self.player.left = False

				if event.key == K_RIGHT: 
					self.player.right = False

				if event.key == K_UP or event.key == K_SPACE:
					self.player.up = False

	def update(self):
		self.player.update(self.block_list, pygame.time.get_ticks())
		self.camera.update(self.player)

		for block in self.block_list:
			self.camera.apply(block)

	def render(self, screen):
		screen.blit(self.image, self.camera.apply(self))
		for sprite in self.player_list:
			screen.blit(sprite.image, self.camera.apply(sprite))

class TitleScreen:
	def __init__(self):
		self.image = load_image("Titlescreen.png")

	def handle_events(self, events):
		for event in events: 
			if event.type == pygame.QUIT:
				pygame.quit()
				sys.exit()
	
			if event.type == KEYDOWN:
				if event.key == K_SPACE:
					manager.go_to(Levelscene(leveldict["level1"]))
				

	def update(self):
		pass

	def render(self, screen):
		screen.blit(self.image, (0, 0))

class platform(pygame.sprite.Sprite):
	def __init__(self, x, y, step):
		pygame.sprite.Sprite.__init__(self)

		self.rect = Rect(x, y, step, step)

class spikeBlock(pygame.sprite.Sprite):
	def __init__(self, x ,y, step):
		pygame.sprite.Sprite.__init__(self)

		self.rect = Rect(x, y, step, step)

class exitBlock(pygame.sprite.Sprite):
	def __init__(self, x, y, step):
		pygame.sprite.Sprite.__init__(self)

		self.rect = Rect(x, y, step, step)


class Camera(object):
	def __init__(self, camera_func, width, height):
		self.camera_func = camera_func
		self.state = Rect(0, 0, width, height)

	def apply(self, target):
		return target.rect.move(self.state.topleft)

	def update(self, target):
		self.state = self.camera_func(self.state, target.rect)

class SceneManager(object):
	def __init__(self):
		self.go_to(TitleScreen())

	def go_to(self, scene):
		self.scene = scene
		self.scene.manager = self

#--------------------------------------gamedata----------------------------------------------#

pygame.init()

# -- setting FPS:
FPS = 30
fpsClock = pygame.time.Clock()

# -- setting height and width of window:
win_width = 700
win_height = 700
half_width = int(win_width/2)
half_height = int(win_height/2)

screen = pygame.display.set_mode((win_width,win_height))
pygame.display.set_caption("HERO")

leveldict = {"level1": {"level_list
"levelname": "spiketest.png",
"step": 10}}

manager = SceneManager()

# ------------------------------- main gameloop -------------------------------------------------#
while True:

	manager.scene.handle_events(pygame.event.get())
	manager.scene.update()
	manager.scene.render(screen)

	fpsClock.tick(FPS)
	pygame.display.flip()


